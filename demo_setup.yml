---
- name: SETUP TOWER FOR CLOSED LOOP INCIDENT MGMT DEMO
  hosts: control
  connection: local
  become: true
  gather_facts: false
  vars:
    ansible_python_interpreter: /usr/bin/python-3.6

  tasks:
    - name: import login credentials for ServiceNow
      include_vars: "{{lookup('first_found', login_info)}}"
      vars:
        login_info:
          - 'private.yml'
          - 'login_info.yml'

    - name: Make sure python packages are installed 
      pip:
        name: pysnow
        state: present 
        executable: pip-3.6

    - name: Create SNOW_CL Tower Project
      awx.awx.tower_project:
        name: SNOW_CL 
        state: present
        organization: Default 
        tower_username: "{{ tower_username }}"
        tower_password: "{{ tower_password }}"
        tower_host: https://localhost
        tower_verify_ssl: false
        scm_type: git 
        scm_url: https://github.com/corumj/ansible-servicenow-demo.git
        scm_update_on_launch: yes 

    - name: Add custom credential for ServiceNow 
      awx.awx.tower_credential_type:
        name: "SNOW_CL Credential"
        description: Credential Type for ServiceNow 
        inputs: "{{ lookup('file', playbook_dir + '/custom_cred/inputs.yml') | from_yaml }}"
        injectors: "{{ lookup('file', playbook_dir + '/custom_cred/injector.yml') | from_yaml }}"
        state: present
        kind: cloud
        tower_username: "{{ tower_username }}"
        tower_password: "{{ tower_password }}"
        tower_host: https://localhost
        validate_certs: false

    - name: Add custom credential
      awx.awx.tower_credential:
        name: SNOW Credential 
        credential_type: SNOW_CL Credential 
        organization: Default 
        inputs:
          username: "{{ username }}"
          password: "{{ password }}"
          instance: "{{ instance }}"
        tower_username: "{{ tower_username }}"
        tower_password: "{{ tower_password }}"
        tower_host: https://localhost
        validate_certs: false

    - name: Add compliance check job template
      awx.awx.tower_job_template:
        name: "SNOW-Demo-Compliance-Check"
        job_type: run
        inventory: "Workshop Inventory"
        project: "SNOW_CL"
        playbook: check_compliance.yml
        credentials: 
          - "Workshop Credential"
          - "SNOW Credential"
        state: "present"
        tower_username: "{{ tower_username }}"
        tower_password: "{{ tower_password }}"
        tower_host: https://localhost
        tower_verify_ssl: false

    - name: add job template - compliance fix
      awx.awx.tower_job_template:
        name: "SNOW-Demo-Compliance-Fix"
        job_type: run
        inventory: "Workshop Inventory"
        project: "SNOW_CL"
        playbook: fix_banner.yml
        credentials: 
          - "Workshop Credential"
          - "SNOW Credential"
        ask_variables_on_launch: yes
        state: "present"
        tower_username: "{{ tower_username }}"
        tower_password: "{{ tower_password }}"
        tower_host: https://localhost
        tower_verify_ssl: false

    - name: Set ServiceNow system property to ignore Tower's TLS certificate 
      # don't do this in production please
      block: 
        - name: Find sys_id for existing system property to verify ssl certificates
          uri:
            url: https://{{ instance }}.service-now.com/api/now/table/sys_properties?sysparm_fields=value,name,type,sys_id&name=com.glide.communications.httpclient.verify_revoked_certificate
            user: "{{ username }}"
            password: "{{ password }}"
            method: GET 
            return_content: yes
          register: ssl_verify

        - name: Create the system property and set to false
          uri:
            url: https://{{ instance }}.service-now.com/api/now/table/sys_properties
            user: "{{ username }}"
            password: "{{ password }}"
            method: POST
            body_format: json 
            body:
              name: com.glide.communications.httpclient.verify_revoked_certificate
              type: boolean 
              value: false 
            status_code: 201 
            return_content: yes
          when: not ssl_verify.json.result

    - name: Create ServiceNow REST Message for Tower Demo
      block:
        - name: Check if Basic Auth Profile for Tower exists already 
          uri: 
            url: "https://{{ instance }}.service-now.com/api/now/table/sys_rest_message?name=Ansible%20Tower%20Demo"
            user: "{{ username }}"
            password: "{{ password }}"
            return_content: yes 
          register: response 

        - name: Create the parts of a REST Message
          block:
            - name: Create the Basic Auth Profile 
              uri:
                url: "https://{{ instance }}.service-now.com/api/now/table/sys_auth_profile_basic" 
                user: "{{ username }}"
                password: "{{ password }}"
                method: POST
                body_format: json 
                body:
                  name: mytower_creds
                  password: "{{ tower_password }}"
                  username: "{{ tower_username }}"
                return_content: yes 
                status_code: 201 
              register: profile 

            - name: Create REST Message
              uri:
                url: "https://{{ instance }}.service-now.com/api/now/table/sys_rest_message" 
                user: "{{ username }}"
                password: "{{ password }}"
                method: POST
                body_format: json 
                body:
                  authentication_type: basic 
                  basic_auth_profile: mytower_creds
                  use_mutual_auth: false 
                  name: Ansible Tower Demo
                  rest_endpoint: "{{ tower_url }}/api/v2/job_templates/SNOW-Demo-Compliance-Fix/launch/"
                return_content: yes 
                status_code: 201 
              register: message 

            - name: Create HTTP Method 
              uri:
                url: "https://{{ instance }}.service-now.com/api/now/table/sys_rest_message_fn" 
                user: "{{ username }}"
                password: "{{ password }}"
                method: POST
                body_format: json 
                body:
                  rest_message: Ansible Tower Demo
                  authentication_type: inherit_from_parent 
                  content: |
                    {
                      "extra_vars": {
                        "incident_num": "${INC}"
                      }
                    }
                  http_method: post 
                  function_name: Launch Compliance Fix 
                  qualified_name: "Ansible Tower Demo [ Launch Compliance Fix ]"
                return_content: yes 
                status_code: 201 
              register: method 

            - name: Add content-type header 
              uri:
                url: "https://{{ instance }}.service-now.com/api/now/table/sys_rest_message_fn_headers"
                user: "{{ username }}"
                password: "{{ password }}"
                method: POST
                body_format: json 
                body:
                  rest_message_function: "{{ method.json.result.sys_id }}"  
                  name: Content-Type 
                  value: "application/json"
                return_content: yes 
                status_code: 201 

          when: not response.json.result
        
    - name: Create ServiceNow Business Rule for Tower Demo
      block:
        - name: Check if Business Rule already exists
          uri:
            url: "https://{{ instance }}.service-now.com/api/now/table/sys_script?name=Ansible%20Tower%20Demo"
            user: "{{ username }}"
            password: "{{ password }}"
            return_content: yes 
          register: response 

        - name: Create Business Rule 
          uri:
            url: https://{{ instance }}.service-now.com/api/now/table/sys_script
            user: "{{ username }}"
            password: "{{ password }}"
            method: POST
            body_format: json 
            body:
              name: Ansible Tower Demo
              action_insert: true 
              advanced: true 
              when: after 
              collection: incident 
              script: |
                (function executeRule(current, previous /*null when async*/ ) {
                  try {
                      var r = new sn_ws.RESTMessageV2('Ansible Tower Demo', 'Launch compliance fix');
                      r.setStringParameterNoEscape('INC', current.number);

                      var response = r.execute();
                      var responseBody = response.getBody();
                      var httpStatus = response.getStatusCode();
                      current.comments = "Contacting Ansible Tower to fix bespoke incident";
                      current.state = '2';
                      current.update();
                  } catch (ex) {
                      var message = ex.message;
                  }
                })(current, previous);
              filter_condition: "short_descriptionLIKEBANNER^EQ"
            status_code: 201 
            return_content: yes
          when: not response.json.result
