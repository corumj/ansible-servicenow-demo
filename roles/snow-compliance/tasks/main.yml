- name: Spin up a Windows server to compliance check 
  ansible.controller.job_launch:
    job_template: 1. Provision
    extra_vars:
      survey_group_name: "compliance"
      survey_server_name: "borg"
      survey_server_env: "test" 
      survey_server_os: "windows"
      survey_business_domain_name: "Red Hat"
    controller_username: "{{ lookup('env', 'TOWER_USERNAME') }}"
    controller_password: "{{ lookup('env', 'TOWER_PASSWORD') }}"
    controller_host: "{{ lookup('env', 'TOWER_HOST') }}"
    validate_certs: true
  register: job 

- name: Add ServiceNow - Compliance Check template 
  ansible.controller.job_template:
    name: "SNOW-Demo-Compliance-Check"
    job_type: check
    inventory: "AWS"
    project: "ServiceNow Tasks"
    playbook: check_compliance.yml
    credentials: 
      - "AWS Windows"
      - "SNOW"
    limit: "demo_compliance"
    job_tags: check
    state: present
    controller_username: "{{ lookup('env', 'TOWER_USERNAME') }}"
    controller_password: "{{ lookup('env', 'TOWER_PASSWORD') }}"
    controller_host: "{{ lookup('env', 'TOWER_HOST') }}"
#     validate_certs: true

# - name: Create ServiceNow REST Message for Closed Loop Demo
#   block:
#     - name: Check if Basic Auth Profile for Tower exists already 
#       uri: 
#         url: "https://{{ snow_instance }}.service-now.com/api/now/table/sys_rest_message?name=Ansible%20Tower%20Demo"
#         user: "{{ snow_username }}"
#         password: "{{ snow_password }}"
#         return_content: yes 
#       register: response 

#     - name: Create the parts of a REST Message
#       block:
#         - name: Create the Basic Auth Profile 
#           uri:
#             url: "https://{{ snow_instance }}.service-now.com/api/now/table/sys_auth_profile_basic" 
#             user: "{{ snow_username }}"
#             password: "{{ snow_password }}"
#             method: POST
#             body_format: json 
#             body:
#               name: mytower_creds
#               password: "{{ lookup('env', 'TOWER_PASSWORD') }}"
#               username: "{{ lookup('env', 'TOWER_USERNAME') }}"
#             return_content: yes 
#             status_code: 201 
#           register: profile 

#         - name: Create REST Message
#           uri:
#             url: "https://{{ snow_instance }}.service-now.com/api/now/table/sys_rest_message" 
#             user: "{{ snow_username }}"
#             password: "{{ snow_password }}"
#             method: POST
#             body_format: json 
#             body:
#               authentication_type: basic 
#               basic_auth_profile: mytower_creds
#               use_mutual_auth: false 
#               name: Ansible Tower Demo
#               rest_endpoint: "{{ lookup('env', 'TOWER_HOST') }}/api/v2/job_templates/SNOW-Demo-Compliance-Fix/launch/"
#             return_content: yes 
#             status_code: 201 
#           register: message 

#         - name: Create HTTP Method 
#           uri:
#             url: "https://{{ snow_instance }}.service-now.com/api/now/table/sys_rest_message_fn" 
#             user: "{{ snow_username }}"
#             password: "{{ snow_password }}"
#             method: POST
#             body_format: json 
#             body:
#               rest_message: Ansible Tower Demo
#               authentication_type: inherit_from_parent 
#               content: |
#                 {
#                   "extra_vars": {
#                     "incident_num": "${INC}"
#                   }
#                 }
#               http_method: post 
#               function_name: Launch Compliance Fix 
#               qualified_name: "Ansible Tower Demo [ Launch Compliance Fix ]"
#             return_content: yes 
#             status_code: 201 
#           register: method 

#         - name: Add content-type header to the http method
#           uri:
#             url: "https://{{ snow_instance }}.service-now.com/api/now/table/sys_rest_message_fn_headers"
#             user: "{{ snow_username }}"
#             password: "{{ snow_password }}"
#             method: POST
#             body_format: json 
#             body:
#               rest_message_function: "{{ method.json.result.sys_id }}"  
#               name: Content-Type 
#               value: "application/json"
#             return_content: yes 
#             status_code: 201 

#       when: not response.json.result
    
# - name: Create ServiceNow Business Rule for Tower Demo
#   block:
#     - name: Check if Business Rule already exists
#       uri:
#         url: "https://{{ snow_instance }}.service-now.com/api/now/table/sys_script?name=Ansible%20Tower%20Demo"
#         user: "{{ snow_username }}"
#         password: "{{ snow_password }}"
#         return_content: yes 
#       register: response 

#     - name: Create Business Rule 
#       uri:
#         url: https://{{ snow_instance }}.service-now.com/api/now/table/sys_script
#         user: "{{ snow_username }}"
#         password: "{{ snow_password }}"
#         method: POST
#         body_format: json 
#         body:
#           name: Ansible Tower Demo
#           action_insert: true 
#           advanced: true 
#           when: after 
#           collection: incident 
#           script: |
#             (function executeRule(current, previous /*null when async*/ ) {
#               try {
#                   var r = new sn_ws.RESTMessageV2('Ansible Tower Demo', 'Launch compliance fix');
#                   r.setStringParameterNoEscape('INC', current.number);

#                   var response = r.execute();
#                   var responseBody = response.getBody();
#                   var httpStatus = response.getStatusCode();
#                   current.comments = "Contacting Ansible Tower to fix bespoke incident";
#                   current.state = '2';
#                   current.update();
#               } catch (ex) {
#                   var message = ex.message;
#               }
#             })(current, previous);
#           filter_condition: "short_descriptionLIKECOMPLIANCE^EQ"
#         status_code: 201 
#         return_content: yes
#       when: not response.json.result

- name: add job template - compliance fix
  ansible.controller.job_template:
    name: "SNOW-Demo-Compliance-Fix"
    job_type: run
    inventory: AWS
    project: "ServiceNow Tasks"
    playbook: check_compliance.yml
    job_tags: fix
    limit: demo_compliance
    credentials: 
      - "AWS Windows"
      - "SNOW"
    ask_variables_on_launch: yes
    state: "present"
    controller_username: "{{ lookup('env', 'TOWER_USERNAME') }}"
    controller_password: "{{ lookup('env', 'TOWER_PASSWORD') }}"
    controller_host: "{{ lookup('env', 'TOWER_HOST') }}"
#     validate_certs: true

- name: Setup SNOW Rest Messages 
  include_role:
    name: snow-rest-message

- name: Setup SNOW business Rule 
  include_role: 
    name: snow-business-rule
    
- name: Wait for compliance target server to provision
  ansible.controller.job_wait:
    job_id: "{{ job.id }}"
    timeout: 1600